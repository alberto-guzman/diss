# Paper 1: Evaluating modern propensity score estimation methods with high-dimensional data

## Introduction

Questions of causality have traditionally been addressed using Randomized Control Trials (RCT), whereby individuals are randomly assigned to either a treatment group that receives some intervention or policy or a control group that receives no such treatment (Murnane & Willett, 2010). The act of randomization assures, on average, that both groups will be balanced on all observable *and* unobservable characteristics, ruling out that an intervention impact is due to the differences in group characteristics (Rosenbaum, 2010, 2020). However, in education and, more broadly, in social science research, ethical, cost, or practical barriers can prevent a researcher from conducting a randomized experiment. Instead, researchers may rely on nonexperimental/observational studies in which students either self-select or are placed into an intervention without randomization. Observational data complicate our ability to attribute causal treatment effects because, without randomization, an imbalance in the distribution of student covariates between groups could lead us to incorrectly attribute a change in the outcome to the intervention or policy instead of differences in group composition. A rich body of methodological literature has focused on developing quasi-experimental methods that attempt to remedy the internal validity issues with observational data by balancing characteristics between those who received treatment and a pool of potential comparison units. One such popular approach is propensity score analysis (CITE).

In education research, propensity score analysis is one of the most widely used quasi-experimental methods (Fan & Nowell, 2011; Powell et al., 2019; Rosenbaum, 2020; Stuart, 2007; Thoemmes & Kim, 2011). Propensity score analysis is a quasi-experimental technique used to balance *observed* characteristics between treated and untreated students, just as randomization to treatment and control conditions creates balance on observable variables. The propensity score represents the probability that a student *would have* been exposed to treatment, conditional on observable characteristics (Rosenbaum & Rubin, 1983, 1984). Propensity scores can be used in a variety of ways to balance pretreatment characteristics, including propensity score matching (PSM), in which treated students are matched to untreated students who have similar propensity scores, and propensity score weighting (PSW), in which the treatment groups are re-weighted in such a way that observed characteristics are balanced between both groups.

However, in order to estimate unbiased treatement effects depends on the researcher correctly specifying the propensity score model(Rosenbaum & Rubin, 1981, 1984), such that:

1.  The *propensity score model* captures *all* covariates related to the selection into treatment, leaving out no potential confounders (Rosenbaum, 2010, 2020).

2.  The *propensity score model* correctly models the association between covariates and treatment selection, meaning that all proper interactions and non-linear terms are specified (Rosenbaum, 2010, 2020).

The literature suggests a "kitchen sink" approach for variable selection to guard against the first condition since the penalties are high if a potential confounder is *not* included in the *propensity score model*, leading to biased treatment effect estimates (Pirracchio et al., 2015; Shortreed & Ertefaie, 2017). For the second condition, the literature suggests iterating through various model specifications, with each iteration adding interactions or non-linear terms until a balance is achieved among the observed characteristics between treated and untreated students (Murnane & Willett, 2010; Rosenbaum). 

At first glance, high-dimensional data should be an asset to propensity score analysis since conventional practices stress the importance of including all available variables in the propensity score model, given that it increases the likelihood of capturing all relevant confounders. However, this is not the case. The traditional logistic model for propensity score estimation tends to degrade in performance as more variables are included in the estimation step (Hill et al., 2011). This can manifest in one of several ways when dealing with high-dimensional data, for example: (1) The addition of a large number of variables may lead the logistic model to simply fail to run and not produce the required propensity score. (2) If the model does run successfully, the model will likely overfit the data, meaning that the logistic model begins to model the random error in the data rather than the relationship between variables. This leads to propensity scores that have little to no variability, and are therefore not suitable for propensity score analysis. (3) Lastly, in a high-dimensional setting, it becomes increasingly difficult to iteratively model all of the suitable interactions and non-linearities with a logistic model (D'Amour et al., 2020; Dorie et al., 2019; Hill et al., 2011).With the rapid emergence of increasingly sophisticated quantitative methods (Daniel, 2019; Gibson & Ifenthaler, 2016; Williamson, 2017), there are increasing possibilities for the development and application of new analytic methods that can flexibly estimate propensity scores. 

These development include using machine learning algorithms for propensity score estimation, such as tree-based methods and neural network approaches (CITE). These machine learning methods allow for an automatic, data-driven way of capturing nonlinearities and non-additivity in the propensity score estimation model, which may lead to better covariate balance without the laborious iteration process. However, to date, no work has looked at the performance of these machine learning methods when applied to high-dimensional data, as much of the previous propensity score simulation work has focused on simulated low-dimensional datasets.

In addition, recent advances in computer science have generated a wealth of research on a potential method that could be used to estimate the propensity score. Deep neural networks (DNN) (Deng & Yu, 2014; Hernández-Blanco et al., 2019; LeCun et al., 2015; Perrotta & Selwyn, 2019). DNNs are algorithms based on our brain's neural architecture. They are commonly used in industry to model complex prediction and classification tasks and have already proven to excel in modeling high-dimensional data (LeCun et al., 2015). DNNs are highly flexible and capable of capturing complex interactions and non-linearities and allow for automatic variable selection (Henandex-Blanco et al., 2010; LeCu et al., 2015; Zou et al., 2019).

DNNs represent an essential tool for researchers in estimating the correct *propensity score model*, in general, and mainly when dealing with large datasets that include hundreds of variables on students and when those variables have complex associations.

Therefore, my first dissertation study aims to make the following methodological contributions.

First, I will incorporate a novel framework for simulating high-dimensional multi-type administrative data. Data which captures representative relationships and data types, which educational researchers experience in their studies. Specifically, I generate data where I varied the sample size and number of variables and induce associations and treatment effects to test my method's performance in extracting unbiased treatment impacts. Using this framework, I will add to the propensity score simulation literature by simulating real educational data, which moves away from conventional and current propensity score simulation studies in epidemiology that simulate relatively small datasets (Cannas & Arpino, 2019; Karim et al., 2018; Lee et al., 2010; Pirracchio et al., 2015; Setoguchi et al., 2008).

Second, I will extend the simulation literature by testing complexities in both the propensity score and outcome models. This is relatively novel in propensity score literature (Cannas & Arpino, 2019), but more realistic for the education context where complicated relationships between variables, treatment assignment, and the outcome could exist. DNNs have been shown to work well in modeling these complexities by creating a parsimonious model that estimates and evaluates all possible interactions and non-linearities among all variables (Hernández-Blanco et al., 2019; Perrotta & Selwyn, 2019).

Third, I will provide the first evaluation of DNN's applied to propensity score analysis. After simulating the data, I will test the DNN's performance against the logistic model and other well-documented estimation techniques used in propensity score literature (e.g., SVM, CART, BART). I evaluate the methods' performance when implemented in both propensity score-based weighting and propensity score-based matching, by assessing how well they achieve a covariate balance, and the bias in treatment effect estimates will be evaluated. 

The remainder of this document is structured as follows: First, I review the relevant literature for this study. Then, I describe my proposed data and simulation approach. Finally, I conclude with a discussion of the remaining questions for my analysis.

## Literature Review

In this section, I review the literature on causal inference and propensity score analysis, focusing on machine learning approaches to estimating propensity scores. In addition, I draw on the literature on neural network approaches, specifically deep neural networks, to motivate the development of my method.

### Neyman-Rubin-Holland Model for Causal Inference

My approach to causal inference is based on the Neyman-Rubin-Holland model, hereafter referred to as the Rubin model (Holland 1986; Rubin 2006, 1974; Rosenbaum 2002). A core tenet of the Rubin model states that a treatment effect is the difference between two potential outcomes for an individual. For a dichotomous treatment variable ($Z$), let $Z_i = 1$ if the $i$'th student was assigned to the treatment group -- say a job training program - and $Z_i = 0$ if they received no such training. Let $Y_{ij}$ be a potential outcome for an individual student depending on treatment assignment $Z_i$, such that each student has two potential outcomes $Y_{i1}$ is the potential outcome had a student received the job training program and $Y_{i0}$ as the potential outcome had that same student not received the program. Therefore, the treatment effect of the job training program for student $i$ would be defined by their individual treatment effect as:

$$
\tau_i = Y_{i1} - Y_{i0}
$$ {#eq-treat}

However, in the real world, we do not simultaneously observe both potential outcomes for the same student. That is to say, we do not observe student $i$'s potential outcome both under receiving the job training program and not. This is why the fundamental problem of causal inference is a missing data problem (CITE). Although we cannot directly observe these potential outcomes under certain assumptions, we can estimate the average treatment effect (ATE) across our sample, defined as:

$$
ATE= \mathbb{E}(Y_{i1} -Y_{i0})=\mathbb{E}(Y_{i1})-\mathbb{E}(Y_{i0})
$$ {#eq-ate}

Where $\mathbb{E}(Y_{i1})$ is the expected value of all students in the treatment group and $\mathbb{E}(Y_{i0})$ is the expected value of all students in the control group. In the context of a true experiment/randomized control studies (RCT), in which students are *randomly* assigned to treatment conditions, we can estimate the ATE in a straightforward manner since with a large enough sample size, both treated and control students will be balanced on all observable and unobservable characteristics. Stated differently, a randomized experiment ensures that $Y_1$ and $Y_0$ are independent of treatment assignment ($Z$), and therefore, the treatment effect can be regarded as causal.

In contrast, we may also be interested in estimating the average treatment effect for those who were *actually* treated. It should be noted that even in an experiment perfect compliance is not always possible. Some students in the treated group may decide not to take up the job training program, while students in the control group may find a way to receive treatment. In this case, we may be interested in the average treatment effect on the treated (ATT) (CITE), which is defined as:

$$
ATT= \mathbb{E}(Y_{i1} -Y_{i0}|T_i=1)=\mathbb{E}(Y_{i1}|Z_i=1)-\mathbb{E}(Y_{i0}|Z_i=1)
$$ {#eq-att}

ATT is the difference in potential outcomes *only* for those students who were actually treated. In practice, the ATT is the most policy-relevant estimand since its the treatment effect on students who took up treatment (CITE).

### Observational Studies

In behavioral and social science research, ethical, cost, or practical barriers can preclude a researcher from conducting a randomized experiment and instead must rely on non-experimental/observational data (Bai, 20XX). As opposed to RCT's, students in observational studies either self-select or are placed into an intervention group without randomization. This complicates the ability to attribute causal claims to a treatment or outreach because without randomization, their may be differences in students observable and unobservable characteristics between those who received the treatment and those who did not.

For example, say that in our job-training example, students were not randomized into treatment or control. Instead, the students self-selected into treatment. In this scenario, the underlying treatment assignment is unknown. It could be that students who self-select into the job-training program are more motivated to find employment than those who did not sign up for the program. Given this imbalance in group characteristics, we may incorrectly attribute a change in outcomes to the treatment instead of differences in characteristics between those students who received treatment and those who did not. In other words, observational studies *cannot* ensure that a student's outcome is independent of treatment ($Z$).

Various statistical methods have been proposed that focus on estimating unbiased treatment effects in observational studies. These include instrumental variable approaches (CITE), regression discontinuity (CITE), synthetic control (CITE), and propensity score approaches (CITE). For my dissertation, I focus on propensity score approaches that leverage student-level covariates to create a balancing score that can account for *observed* group differences.

### Propensity Scores

Rosenbaum and Rubin initially proposed propensity score analysis in 1983 as a means to increase the accuracy of capturing unbiased treatment effects in observational studies (CITE). Propensity score analysis is one of the most popular quasi-experimental methods among social and behavioral researchers, particularly among applied educational researchers (CITE).

Rosenbaum and Rubin define a propensity score ($e$) as the conditional probability of assignment to treatment conditional on observed pre-treatment covariates. Defined as:

$$
e(x) = Pr(Z=1|X)
$$ {#eq-ps}

Propensity scores are typically estimated as predicted probabilities from a logistic regression in which a binary outcome variable indicating whether a unit received treatment is being predicted by observed invidual characteristics ($X$). They range from 0 to 1, with values closer to 1 indicating that an individual is more likely to be assigned to treatment. Rosenbaum and Rubin (1983, 1984) demonstrate that if the propensity score is balanced across treatment and control groups, then the distribution of observed covariates between treatment and control is also balanced (CITE). Therefore, theoretically, two students with similar propensity scores should have a similar distribution of observed covariates.

Researchers can condition on the propensity score using a variety of techniques, including matching, which pairs treated students with control students based on the proximity of their propensity score; stratification, which groups students into unique strata based on their propensity score; and weighting, which reweights students in the sample so that the distribution of the propensity score of the control group is similar to that of the treated group. All these methods have a similar aim of using the propensity score to adjust for the imbalance in the covariate distribution between treated and control units to approximate true randomization conditions. Therefore, by conditioning the PS through matching, stratification, or weighting, we can eliminate bias in our treatment effect and approximate the true causal effect. However, for this to be true, certain assumptions must hold.

#### Assumptions

Several assumptions must be met to estimate an unbiased treatment effect using propensity score analysis correctly. These include the strong ignorability assumption, the stable unit value assumption, and the region of common support.

The strong ignorability assumption states that the potential outcome of an individual is conditionally independent of treatment assignment if we successfully conditioned on all covariates related to treatment assignment, $Y_1, Y_0 \perp Z|X$. In experimental studies, this assumption is satisfied by the act of randomization, since randomization ensures that treatment assignment is independent of an individual's outcome. However, in observational studies, this assumption holds if *all* covariates related to treatment assignment are included in the PS model.

The second assumption, the stable unit treatment value assumption (SUTVA), states that the potential outcome of an individual is unaffected by the treatment assignment of any other individual. In other words, the outcome of a student is independent of whether another student is assigned to the treatment or control group.

Finally, the third assumption is the region of common support. This assumption states that there must be sufficient overlap in the estimated propensity score distribution between the treatment and control groups. With sufficient overlap, we can ensure that we can find suitable matches to control students.

If these assumptions hold, we can estimate causal effects from observational data. Unfortunately, many of these assumptions are untestable. For example, in observational data, the majority of the time, we are blind to the underlying treatment assignment mechanism, and therefore we cannot be sure that *all* covariates related to treatment assignment are included in our propensity score model. In practice, propensity scores should be viewed as a means of reducing some, but not all, of the bias associated between treatment and outcome in observational studies. In practice, we cannot ensure that all confounding variables are included in our propensity score model. Therefore, we should carefully consider which covariates are selected to be included in the propensity score model.

#### Covariate Selection

A reasonable approach to selecting covariates in propensity score analysis is selecting covariates that are theoretically sound and relate to treatment assignment and the outcome. Since in order to estimate unbiased treatment effects correctly using propensity scores, we have to capture *all* covariates related to the selection into treatment, leaving out no potential confounders (Rosenbaum, 2010, 2020). However, in practice, it may be impossible to know which covariates our confounders; therefore, the literature suggests a "kitchen sink" approach for variable selection to guard against the penalties of excluding potential founders (Pirracchio et al., 2015; Shortreed & Ertefaie, 2017). In addition, the *propensity score model* must capture the correct functional form of the covariates, meaning that all proper interactions and non-linear terms are specified (Rosenbaum, 2010, 2020). If the propensity score model is misspecified, it will lead to biased treatment effect estimates (Rosenbaum et al., 1983; Shadish et al., 2010; Steiner et al., 2011).

To better capture the relationship among covariates, the literature suggests iterating through various model specifications, with each iteration adding interactions or non-linear terms until a balance is achieved amongst the observed characteristics between treated and un-treated students (Murnane & Willett, 2010; Rosenbaum). This iterative process becomes increasingly cumbersome as the number of covariates increases (CITE).

### Estimating the Propensity Score

The most critical step in propensity score analysis is estimating the propensity score ($e$), since a misspecified propensity model will yield propensity scores that are not well suited to correctly balanced observed characteristics. Any parametric or non-parametric model can generate propensity scores if it outputs a bounded probability between 0 and 1. Logistic regression is the most common parametric model for estimating the propensity score (CITE).

#### Logistic Regression

Logistic regression is the most common model used to generate propensity scores in the social science literature due to its ease of interpretation and familiarity with many applied researchers (Keller et al., 2013) and its ability to accommodate both continuous and categorical covariates. The logistic model is defined as follows:

$$
e(x) = ln\left( \frac{Pr(Z=1|X)}{1-Pr(Z=1|X)} \right) = \beta_o + \beta_1X_1 + \cdots + \beta_pX_p
$$

Where $X$ is a vector of observed covariates that are regressed on $Z$, a binary indicator equal to 1 if a student is in the treatment group and 0 otherwise. The output of the logistic regression is predicted probabilities that are continuous and bounded between 0 and 1 (i.e., propensity scores).

Although logistic regression is the most widely used model for estimating propensity scores, it may not be the most valid for inference. Various simulation studies suggest that using logistic regression for modeling propensity scores is inadequate and leads to biased treatment effects when incorrectly specified, given that parametric models require assumptions regarding the functional form and variable distributions (Lee et al., 2010; Pan & Bai, 2015; Setoguchi et al., 2008; Westreich et al., 2010). This is especially true when estimating propensity scores with hundreds of covariates. The logistic model tends to degrade and estimate a propensity score that falls outside the desired 0 to 1 bound in a high-dimensional context. With the ever-increasing amounts of "big" administrative data at the disposal of applied behavioral and social science research, the degradation of logistic regression is worrisome. However, outside social science, research has suggested alternatives to logistic regression with the use of non-parametric models using machine learning algorithms.

#### Machine Learning Approaches

Machine learning algorithms have recently gained popularity in the causal inference and propensity score literature (CITE Athey) due to these algorithms being highly flexible and able to model complex functional forms iteratively without explicit manipulation from the research. With a simple modification, these algorithms can output bounded probabilities that can be used as propensity scores. Given the success of machine learning methods for prediction tasks, such as XXX (CITE), it is reasonable to think they are worthy candidates for the propensity score estimation problem, which is a prediction problem. Broadly, machine learning algorithms used in propensity score estimation can be classified into tree-based, ensemble methods, and -- the focus of this dissertation -- neural network-based approaches.

#### Tree Based Methods

One popular machine learning approach to estimating propensity score is classification and regression trees (CART) (Friedman, Olshen, & Stone in 1984). This algorithm splits data recursively into subsets based on individual covariates to predict the probability of membership assignment of a given individual. To generate propensity scores, the predicted outcome is simply a binary indicator of treatment assignment ($Z$). This algorithm splits covariates by level of importance, with the first split being the covariate that can produce the most distinctive split. For example, if a student above 15 years of age is related to treatment assignment, the first split would split the data into students with $age > 15$ and $age < 15$. The algorithm continues by splitting the data by the next most influential covariate split, creating a tree-like structure (FIGURE). Splitting stops when the data is binned into unique "branches," which minimizes the prediction error in which an additional split would not improve the prediction of treatment assignment. The final "branches" of the model represent the individual grouping of students with similar propensity scores. The output of CART is the predicted probabilities which are then used as propensity scores. Like logistic regression, the CART algorithm can handle continuous and categorical covariates. However, unlike logistic regression, CART is insensitive to outliers and can model interactions and non-linearities automatically (CITE).

A well-documented issue with CART is that the single tree may likely overfit the data. Therefore, a modified version of CART was developed that "prunes" back branches that do not lead to a reduction in prediction error, referred to as XXX. This leads to trees that do not overfit the data. Although pruning can alleviate some of the changes of overfitting the data, a significant drawback of CART is that it relies on a single tree which may be weak in predicting the propensity score.

#### Ensemble Methods

Ensemble methods are a family of algorithms that generate multiple trees predicting treatment assignment. Exploiting differences among each tree ensemble method can significantly improve prediction, given that many weak trees together can generate better prediction than a single CART. A popular ensemble method is bootstrapped aggregated CART, referred to as Bagged CART (CITE). Bagged CART involves fitting multiple CARTs (i.e., trees) on bootstrapped data samples. By "growing" trees on bootstrapped samples, we can reduce the chances of overfitting our data. Each tree will generate a probability that an individual will be assigned to treatment, with a final probability of membership based on aggregating the probability of assignment across all trees. Finally, a more robust ensemble method is random forest (CITE). Compared to CART and Bagging, random forest algorithm grows trees by randomly selecting covariates and individuals to grow individual trees. With each new tree, the algorithm "learns" the best combination of covariates to generate a final probabilistic prediction based on the "forest" it has generated. These random forest techniques have shown significant promise in predicting propensity scores in the presence of complex data associations (CITE). However, with the recent advances in computing power, non-tree-based methods, such as neural networks, have increased in popularity.

### Artificial Neural Networks

#### Artificial Neuron

The building block for artificial neural networks were initially developed by psychologist Frank Rosenblatt (1958) with their idea of a perceptron or artificial neuron. An artificial neuron is a simplified mathematical model of neurons in our brain. Neurons are biological switches that take input signals from other neurons that either cause the neuron to fire or not. Neurons can be thought of as simple processing units. In our brain, these individual neurons are connected into vast networks of billions of neurons, where the outputs of one neuron become inputs of another, allowing for the transmission of complex information.

An artificial neuron mimics the function of a biological neuron. The artificial neuron takes in a set of inputs of $p$ variables, $X=(X_1, X_2, \cdots, X_i)$ that have corresponding weights $w=(w_1, w_2, \cdots ,w_i)$ that represent the different input strength of each variable. Each variable is then multiplied by its corresponding weight. These weighted variables are then summed together, and a bias term is added ($\beta_0$), to create a linear transformation of the input variables. The weights and bias terms are analogous to the slope and intercept of a linear regression. The linear transformation is then passed to an activation function $g(z)$. The activation function takes in the linear transformation and performs a computation that generates an output ($\hat{y}$). This activation function is a linear function, such as the sigmoid function, which outputs values between 0 and 1.

We can express this artificial neuron generally as:

$$
\hat{y} = g(z) = g(\beta_0 + \sum_{i=1}^{p}X_iw_i)
$$

This simple neuron can be used to solve a binary classification problem. In our case, we are interested in classifying each student in our sample as belonging to the treatment or control condition conditional on observed covariates. If we set the activation function $g(z)$ to a sigmoid function, we are guaranteed an output value between 0 and 1. We can consider it as a predicted probability of assignment to treatment (i.e., propensity score). For the neuron to make accurate predictions for each student, it must "learn" the correct weight and bias parameter specifications. This is analogous to finding the right slope and intercept that produce a line of best fit for bivariate data.

This learning process works by taking each observation in our sample and feeding it into the neuron. In which the first pass has initialized weights and bias set to a random number. The outcome variable is set to the binary indicator of treatment assignment, so we obtain a predicted probability of treatment assignment for each student. Our initial pass of the data will likely generate wrong predictions since the weights and bias terms are initialized to random numbers. In other words, our prediction of treatment assignment ($\hat{y}$) will be far away from the actual treatment assignment ($y$), with an associated loss.

The goal of the neuron is to correctly learn the values of the weights and bias parameters that minimize a loss function, for example, the mean squared error (MSE). For each subsequent data pass, the neuron will update the bias values and weights iteratively to minimize this loss function. This updating is commonly done using a process known as backpropagation. After a user-defined number of iterations, the neuron will be optimized with bias and weight terms that best predict assignment to treatment. For simple classification problems that have linear covariate associations a single neuron may be appropriate, however, as the complexities of the associations between covariates increase more neurons are needed in order to learn complex functional forms.

#### Single-Layer Neural Network

Following the development of the artificial neuron, work began to model more complex processing units composed of interconnected artificial neurons organized in layers, culminating with the creation of the single-layer feed-forward neural network (NN) (Figure X). NN are refereed to as single-layer because of the single middle layer of interconnection artificial neurons. These NN can learn very complex data representations, by generating various non-linear representation of the data through multiple artificial neurons. These non-linear outputs are passed into a final layer which pools the outputs of the individual neurons into a non-linear function, $f(x)$ that generation a prediction ($\hat{y}$). By having multiple artificial neurons calculating predictions on various non-linear combination of the input variables these network are able to learn complex non-linear and non-additive association between covariates.

The NN is comprised of a series of artificial neurons organized into three layers (Schalkoff, 1997). The first layer is the input layer of $p$ variables, $X_p=(X_1, X_2, \cdots, X_p)$, our observed covariates. Those input variables are fully connected to the second layer - a hidden layer - made up of $K$ hidden neurons, $A_k = (A_1, A_2, \cdots, A_k)$, which are identical to the artificial neurons mentioned previously, except that the activation function is swapped out to a non-linear function. Each hidden neuron calculates its own prediction based on its unique non-linear combination of variable inputs, with have its own associated weight and bias parameters. The last layer is the output layer, which pools the non-linear outputs of the hidden neurons and passes them as inputs to a non-linear output function, $f(x)$ which generates a final prediction ($\hat{y}$). The interconnected neurons allow NN to learn complex association between covariates and treatment assignment than any single artificial neuron.

We can express a NN generally as[^02-propensity_over-1]:

[^02-propensity_over-1]: This notation was adapted from James, Witten, Hastie and Tibshirani, 2021

$$
\hat{y} = f(x) = B_0 + \sum_{k=1}^{K}B_kh_k(X) = B_0 + \sum_{k=1}^{K}B_kg(w_{k0}+\sum_{j=1}^{p}w_{kj}X_j)
$$

Where each hidden unit $A_k, k =1,\cdots,K$ is created from a weighted linear combination of input variables, $X_1,X_2, \cdots,X_p$ that are applied to an activation function $g(z)$ resulting in an "activation" for each hidden neuron, $A_k$:

$$
A_k = h_k(X) = g(w_{k0}+\sum_{j=1}^{p}w_{kj}X_j)
$$

Where $B_k$ and $w_{kj}$ are the bias and corresponding weights for each $A_k$ hidden neuron. We can regard these activations are the individual predictions of each hidden neuron. Once these predictions are pooled together and passed through the output function ($f(x)$) has its own bias term, $B_0$, and outputs a final prediction ($\hat{y}$).

This learning process of the NN works in similar way to a single neuron but instead of learning only one set of weights and bias terms it learns multiple. In a similar fashion, the ultimate goal of the NN is to learn the correct weights and bias parameters such that the loss function is minimized. In contrast to artifical neuron, NN can learn complex non-linear relationships in a computationally effecient manner. Relatively few studies have looked at the overall performance of NN in estimating propensity scores. XX find that the NN approach is able...

More modern approaches use NN that have more than one hidden layer, with varying number of nodes. This NN architecutre is reffered to as deep neural networks (DNN) or multilayer neural networks.

#### Deep Neural Networks

DNN distinguishign feature is multiple hidden layers that allow it to capture even more complex relationships amongst covariates. These multiple hidden layers is what makes this neural network architecture "deep." Figure X shows a diagram of a DNN with two hidden layers ($L_1,L2$), which we use as superscript to distinc which layer we are reffering to. The first functions exactly as the middle layer of a NN (eq...). Such that:

$$
A_k^{(1)}=h_k^{(1)}(X) = g(w_{k0}^{(1)}+\sum_{j=1}^{p}w_{kj}^{(1)}X_j)
$$Where each hidden unit in the first layer $A_k^{(1)}, k =1,\cdots,K_1$ is created from a weighted linear combination of input variables, $X_1,X_2, \cdots,X_p$ that are applied to a non-linear activation function $g(z)$ resulting in an output for each hidden neuron in the first layer, $A_k^{(1)}$.

However, in this DNN example we have a second hidden layer, $L_2$. Which takes as inputs the output $A_k^{(1)}$ of the first hidden layer and computer new activations. Such that we calculate the activation of the second layer as follows: ,

$$
A_l^{(2)}=h_k^{(2)}(X) = g(w_{l0}^{(2)}+\sum_{k=1}^{K_1}w_{lk}^{(2)}A_k^{(1)})
$$

Where each hidden unit in the second layer $A_l^{(2)}, l =1,\cdots,K_2$ is a function from the output of the weighted non-linear combinations of $A_k^{(1)}$. This process could continue with increasing number of hidden layers. As data moves from layer to layer, the DNN is able to aproximate any smooth function (CITE). The final layer of the DNN pools outputs of the second layer and feeds it into an output function which generates a prediction.

DNN's can uncover complex relationships in high-dimensional data with better precision than traditional statistical methods and machine learning methods, which were novel just a decade ago (Hernández-Blanco et al., 2019; LeCun et al., 2015; Schmidhuber, 2014; Zou et al., 2019). A DNNs ability to identify the intricate relationships withing large-volume, high-dimensional data makes these algorithms applicable to causal methods, like propensity score analysis.

DNN's have gained significant attention in the industry and academic research, making considerable advances in image recognition and natural language processing (Krittanawong et al., 2019; LeCun et al., 2015; Zou et al., 2019). Recent investments by Google in software development now makes it easy to develop DNN models using user-friendly programming languages (Doleck et al., 2020; Pang et al., 2019). Though to date, DNN has not been evaluated in propensity score estimation.

## Simulation

Using Monte Carlo simulations, we compare our deep neural network approach to the traditional logistic model as well existing machine learning approach including X, X, for propenisty score estimation under high dimensional data. In this section I describe the proposed simulation design and analytic procedures.

### Data Generation

We generated three covariate sets of varying sizes (p = 20, 100, 200) of mixed-data types (including..). Our starting condition of p = 20 was chosen given this is the average number of covariates used in applied propenisty score analysis papers in social science research (CITE). Our novel data geenration approach is simulated in order to look like high dimensional "messy data" applied researcher may encounter.

We took a programatic approach to generating the covariates by which we half of covariates (p) where dranf from standard normal distributions, a quarter were drawn from a unifrom distribution and the last quarter from a binomial distribution. Correlation among covariates was induced by taking a quarter of covaraites (p) and inducing a random correlation pull from a beta distribution, which is bounded between 0 and 1. Next, we took a sample of 80% of our covariates, and to 20% of that sample

To answer the research question, we generated three simulated cohorts of varying sample size (n = 100, 1000, 10000) with a binary treatment variable Tx and ten continuous covariates (W_i = 1...10), three dichotomized covariates (D_i = 1,2,3) that were independently associated with Tx. Another 83 covariates were generated that were not associated with Tx (E_i = 1...87). This produced a dataset with 100 covariates and a binary Tx variable. Data were generated by first constructing seven covariates generated as independent standard normal random variables with mean zero and unit variance (W_i = 1...7). Another 3 (W_i= 8, 9, 10) standard normal random variables were created with induced correlations of .1, .5, and .8. An additional 3 dichotomized covariates were created (D_i = 1,2,3). Finally, 87 covariates were generated as independent draws from a standard normal random distribution. The treatment dummy variable (Tx) was generated using linear regression as a function of W_i. The formula to generate the true propensity score was generated with the following structure: 〖(1) Pr〗⁡\[Tx=1│W_i \] =(1+exp⁡{-(β_0+β_1 W_1+β_2 W_2+β_3 W_3+β_4 W_4+β_5 W_5+β_6 W_6+β_7 W_7+β_8 D_1+β_9 D_2+β_10 D_3 )} )\^(-1) To generate the treatment variable, we generated a random number from \[0,1\] from a uniform distribution. Tx was set to equal one if the random number was less than the true propensity score estimated with formula (1). The covariance matrix for the constructed variables is shown in Appendix A. Scenarios to be Tested To compare the performance of logistic regression and DNN for propensity score estimates, we created realistic data structure scenarios that educational researchers could find themselves in. We varied the sample size and number of covariates to develop 6 unique scenarios. Table 1 shows the scenarios that we tested. Different sample sizes were used from 100, 1000, to 10000 as well as the number of covariates from 13 covariates (Low-Dimensional Data) to 100 covariates (High Dimensional Data). This should capture scenarios in which researchers are using very small educational datasets with a few covariates, to a large amount of administrative data that could yield hundreds of covariates. Since we theoretically know the membership assignment to tx for the entire sample we were able to employ cross-validation using the holdout method, in which we can split our dataset into two parts a Training dataset for which we train our model on and a Testing dataset to test our model specifications that were "learned" in the training step (Kohavi, 1995). We used standard holdout, with 75% of the dataset being used to train and 25% being "held out" to test. This avoids overfitting our models. For each scenario, we compared both logistic and DNN in estimating propensity scores. I accessed the performance of each model using an accuracy score given by:

Accuracy=(True Positive+True Negative)/(n )

Simulated data and data analysis was conducted on Python 3 on a Mac platform.

To answer the research question, we generated three simulated cohorts of varying sample size (n = 100, 1000, 10000) with a binary treatment variable Tx and ten continuous covariates ( = 1...10), three dichotomized covariates ( = 1,2,3) that were independently associated with Tx. Another 83 covariates were generated that were not associated with Tx ( = 1...87). This produced a dataset with 100 covariates and a binary Tx variable. Data were generated by first constructing seven covariates generated as independent standard normal random variables with mean zero and unit variance ( = 1...7). Another 3 (= 8, 9, 10) standard normal random variables were created with induced correlations of .1, .5, and .8. An additional 3 dichotomized covariates were created ( = 1,2,3). Finally, 87 covariates were generated as independent draws from a standard normal random distribution. The treatment dummy variable (Tx) was generated using linear regression as a function of . The formula to generate the true propensity score was generated with the following structure:

To generate the treatment variable, we generated a random number from \[0,1\] from a uniform distribution. Tx was set to equal one if the random number was less than the true propensity score estimated with formula (1). The covariance matrix for the constructed variables is shown in Appendix A. Scenarios to be Tested To compare the performance of logistic regression and DNN for propensity score estimates, we created realistic data structure scenarios that educational researchers could find themselves in. We varied the sample size and number of covariates to develop 6 unique scenarios. Table 1 shows the scenarios that we tested. Different sample sizes were used from 100, 1000, to 10000 as well as the number of covariates from 13 covariates (Low-Dimensional Data) to 100 covariates (High Dimensional Data). This should capture scenarios in which researchers are using very small educational datasets with a few covariates, to a large amount of administrative data that could yield hundreds of covariates. Since we theoretically know the membership assignment to tx for the entire sample we were able to employ cross-validation using the holdout method, in which we can split our dataset into two parts a Training dataset for which we train our model on and a Testing dataset to test our model specifications that were "learned" in the training step (Kohavi, 1995). We used standard holdout, with 75% of the dataset being used to train and 25% being "held out" to test. This avoids overfitting our models. For each scenario, we compared both logistic and DNN in estimating propensity scores. I accessed the performance of each model using an accuracy score given by:

Simulated data and data analysis was conducted on Python 3 on a Mac platform.

### Data

### Simulation

## Looking Ahead

As educational research moves towards the age of Big Data, researchers will have access to tremendous amounts of covariates. With such a large number of covariates at our disposal, researchers can leverage causal methods like propensity score estimation. The traditional approach has been to use logistic regression, but as computational power has increased more sophisticated Deep Learning methods have been developed that are well situated to solve classification problems such as propensity score estimation. Results showed that DNN and Logistic regression performed equally well across conditions and sample sizes. In the final iteration of the paper, we will focus on creating a Monte Carlo simulation study to analyze these effects. We will further consider varying the linear relationship the covariates had with the outcome to more complex non-linear patterns, perhaps in that context DNN model would outperform Logistic models.

## Tables and Figures
