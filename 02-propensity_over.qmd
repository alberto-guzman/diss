# Paper 1: Evaluating modern propensity score estimation methods with high-dimensional data

## Introduction

Traditionally, questions of causality have been addressed through the use of randomized control trials (RCT), in which individuals are randomly assigned to either a treatment group that receives an intervention or a control group [@murnane2010methods; @Rosenbaum.2010]. Randomization ensures that, on average, both groups are balanced on all observable and unobservable characteristics, eliminating the possibility that an intervention's effect is due to differences in group characteristics [@Rosenbaum.2010]. However, in education and broader social science research, ethical, financial, or practical obstacles can prevent a researcher from conducting a randomized experiment. Instead, researchers must rely on non-experimental or observational studies in which students self-select or are placed in an intervention without randomization.

Observational data complicates causal inference because, in the absence of randomization, an imbalance in the distribution of student covariates between groups could lead us to incorrectly attribute a change in outcome to the intervention or policy, as opposed to differences in group composition [@Rosenbaum.2010]. A vast body of methodological literature has centered on developing quasi-experimental methods that attempt to address the internal validity issues associated with observational data by balancing the *observed* characteristics of those who received treatment and those who did not. One such popular approach is propensity score analysis [@Stuart.2010; @Lee.2010].

Propensity score analysis is one of the most commonly employed quasi-experimental methods in education research [@Fan.2011; @Powell.2020; @Rosenbaum.2010; @Stuart.2010; @ho2007matching; @Lee.2010]. Propensity score analysis attempts to balance *observed* characteristics between treated and untreated students, just as randomization to treatment and control conditions creates balance on observable characteristics. The propensity score represents the probability that a student *would have* been exposed to treatment, conditional on observed covariates [@Rosenbaum.1981; @Rosenbaum.1984]. Propensity scores can be used in a variety of ways to balance student covariates, including propensity score matching, in which treated and untreated students with similar propensity scores are matched, and propensity score weighting, in which treatment groups are re-weighted so that observed covariates are balanced between both groups, and stratification where the propensity score is used to group students into unique strata with similar propensity scores with the goal of balancign observed covariates within each stratum [@Pan.2018qcl].

However, to estimate unbiased treatment effects, the researcher must correctly specify the propensity score model such that:

1.  The propensity score model captures *all* covariates associated with treatment assignment, omitting no potential confounding variables [@Rosenbaum.1984; @Rosenbaum.1981].

2.  The propensity score model accurately models the relationship between covariates and treatment selection, meaning that all appropriate interactions and non-linear terms are specified [@Rosenbaum.1987; @Rosenbaum.1984; @Rosenbaum.1981].

The literature suggests a "kitchen sink" approach for variable selection to guard against the first condition because the penalties are high if a potential confounder is *not* included in the propensity score model, resulting in biased treatment effect estimates [@Pirracchio.2015; @Shortreed.2017lu8; @Stuart.2010]. Given some confounders are simply unmeasured, many have proposed the use of sensitity analysis to understand how the exclusion of an unmeasured confounder could ifluence treatment effects (CITE). For the second condition, the literature suggests iterating through various model specifications, with each iteration adding interactions or non-linear terms until a balance is achieved among the observed characteristics between treated and untreated students [@murnane2010methods; @Rosenbaum.2010].

At first glance, high-dimensional (i.e., big data) data should be an asset to propensity score analysis, since conventional practices stress the importance of including *all* available variables in the propensity score model, given that it increases the likelihood of capturing all relevant confounders. Nevertheless, this is not the case. The performance of the traditional logistic model for estimating propensity scores tends to degrade as more variables are included in the estimation step [@Hill.2011soh].

This can manifest itself in a variety of ways when dealing with high-dimensional data, such as:

1.  A large number of covariates may prevent the logistic model from converging and produce extreme propensity scores [@Hill.2011soh; @Collier.2022].

2.  If the model runs successfully, it is likely to overfit the data. Meaning it will begin to model random error in the data rather than the relationship between variables [@Hill.2011soh; @ho2007matching; @Stuart.2010; @Lee.2010]. This may result in propensity scores with little to no variability.

3.  In a high-dimensional context, it becomes increasingly difficult to iteratively model all of the appropriate interactions and non-linearities with a logistic model [@d2020underspecification; @Dorie.2019; @Hill.2011soh].

With the rapid emergence of increasingly sophisticated machine learning algorithms, there are increasing possibilities for developing and applying new analytic methods that can flexibly estimate propensity scores with high-dimensional data [@daniel2019big; @Hill.2011soh; @hernandez2019systematic; @williamson2017big]. These machine learning algorithms enable an automatic, data-driven method of capturing non-linearities and non-additivity in the propensity score estimation model, which may result in a more balanced covariate distribution without the need for tedious iteration. To date, however, no research has examined the performance of these machine learning methods when applied to high-dimensional data, as the majority of previous propensity score simulation research has focused on simulated low-dimensional datasets [@Setoguchi.2008; @Stuart.2010; @Lee.2010].

Furthermore, recent advances in computer science have generated a wealth of research on a potential method that could be used to estimate the propensity score, deep neural networks (DNN) [@LeCun.2015; @hernandez2019systematic; @LeCun.2015]. DNNs are algorithms based on the neural architecture of the human brain. They are commonly used in industry to model complex prediction and classification tasks and have already proven to excel in modeling high-dimensional data [@LeCun.2015]. DNNs are highly flexible. They are capable of capturing complex interactions and non-linearities and enable automatic variable selection [@hernandez2019systematic; @LeCun.2015; @schmidhuber2015deep; @Pang.2019].

Therefore, my first dissertation study aims to assess the performance of the traditional logistic model and other machine learning methods with high-dimensional data, using propensity score weighting. In addition, I overcome the limitations of existing methods by proposing a novel DNN-based approach to the estimation of propensity scores and illustrate a new framework for generating multi-type, correlated high-dimensional data. Currenlty avaialble simulation literature is based on genomic data, or simple datasets...

The remainder of this document is structured as follows: First, I review the relevant literature for this study. Then, I describe my proposed data and simulation approach.

\newpage

## Literature Review

In this section, I review the literature on causal inference and propensity score analysis, focusing on machine learning approaches to estimating propensity scores. In addition, I draw on the literature on neural network approaches, specifically deep neural networks, to motivate the development of my DNN-based method for estimating propensity scores.

### Neyman-Holland-Rubin Model for Causal Inference

My approach to causal inference is based on the Neyman-Holland-Rubin model, hereafter referred to as the Rubin model [@rubin1976inference; @rubin2005causal; @holland1986statistics; @neyman1923application]. A core tenet of the Rubin model states that a treatment effect is the difference between two potential outcomes for an individual [@rubin2005causal]. For a dichotomous treatment variable ($Z$), let $Z_i = 1$ if the $i$'th student was in the treatment group -- say a college access program - and $Z_i = 0$ if they were not. Let $Y_{iz}$ be a potential outcome for student $i$ depending on treatment assignment $Z$, such that an individual student has two potential outcomes. $Y_{i1}$ is the potential outcome had student $i$ participated in the college access program and $Y_{i0}$ is the potential outcome had that same student not participated. Therefore, the treatment effect of the college access program for student $i$ would simply be the difference in their potential outcomes:

$$
\tau_i = Y_{i1} - Y_{i0}
$$ {#eq-treat}

However, in the real world, we do not simultaneously observe both potential outcomes for the same student. That is to say, we can only observe student $i$'s potential outcome in the collegge acccess program if they participated in the program. This is why the fundamental problem of causal inference is a missing data problem [@holland1986statistics]. Although we cannot directly observe these potential outcomes under certain assumptions, we can estimate the average treatment effect (ATE) across our sample, defined as:

$$
ATE= \mathbb{E}(Y_{i1} -Y_{i0})=\mathbb{E}(Y_{i1})-\mathbb{E}(Y_{i0})
$$ {#eq-ate}

Where $\mathbb{E}(Y_{i1})$ is the expected value of all students in the treatment group and $\mathbb{E}(Y_{i0})$ is the expected value of all students in the control group. In the context of a true experiment in which students are *randomly* assigned to treatment conditions, we can estimate the ATE in a straightforward manner since with a large enough sample size, both treated and control students will be balanced on all observable and unobservable characteristics. Stated differently, a randomized experiment ensures that $Y_1$ and $Y_0$ are independent of treatment assignment ($Z$), and therefore, the treatment effect can be regarded as causal [@Rosenbaum.2010].

In addition, we may also be interested in estimating the average treatment effect among those who were assigned to the treatment group. In this case, we may be interested in the average treatment effect on the treated (ATT) [@Rosenbaum.2010], which is defined as:

$$
ATT= \mathbb{E}(Y_{i1} -Y_{i0}|T_i=1)=\mathbb{E}(Y_{i1}|Z_i=1)-\mathbb{E}(Y_{i0}|Z_i=1)
$$ {#eq-att}

In practice, the ATT is the most policy-relevant estimand since its the treatment effect on students who took up treatment [@Stuart.2010].

### Observational Studies

In behavioral and social science research, ethical, cost, or practical barriers can preclude a researcher from conducting a randomized experiment and instead must rely on using non-experimental or observational data [@Bai.2011; @Pan.2018qcl]. As opposed to RCT's, students in observational studies either self-select or are placed into an intervention without randomization. This complicates causal inference because without randomization, there may be differences in students observable and unobservable characteristics between those who received the treatment and those who did not that may influence a students outcome [@Austin.2011].

For example, say that in are college-access program example, students were not randomized into treatment or control. Instead, the students self-selected into treatment. In this scenario, the underlying treatment assignment is unknown. It could be that students who self-select into the program are generally more interested in going to college than those who did not sign up. Given this imbalance in college interest, we may incorrectly attribute a increase in college enrollment to the treatment instead of differences in college interest between treated and untreated students. In other words, observational studies *cannot* ensure that a student's outcome is independent of treatment assignment ($Z$) [@Rosenbaum.2010].

Various statistical methods have been proposed that focus on estimating unbiased treatment effects in observational studies. These include instrumental variable approaches, regression discontinuity, synthetic control, and propensity score analysis [@Austin.2011; @Bai.2011; @Stuart.2010; @Rosenbaum.2010]. For my dissertation, I focus on propensity score analysis which leverage student-level covariates to create a balancing score that can account for *observed* group differences.

\newpage

### Propensity Scores

Rosenbaum and Rubin initially proposed the concept of a propensity score as a means to increase the accuracy of capturing unbiased treatment effects in observational studies [@Rosenbaum.1984; @Rosenbaum.1981]. Propensity score analysis is one of the most popular quasi-experimental methods among social and behavioral researchers, particularly among applied educational researchers [@Lee.2010; @ho2007matching; @Stuart.2010].

Rosenbaum and Rubin define a propensity score, $e(x)$ as the probability of assignment to treatment conditional on observed pre-treatment covariates. Defined as:

$$
e(x) = Pr(Z=1|X)
$$ {#eq-ps}

Propensity scores are typically estimated as predicted probabilities from a logistic regression in which a binary outcome variable indicating whether a unit received treatment is being predicted by observed individual characteristics ($X$). They range from 0 to 1, with values closer to 1 indicating that an individual is more likely to be assigned to treatment. Rosenbaum and Rubin demonstrate that if the propensity score is balanced across treatment and control groups, then the distribution of observed covariates between treatment and control is also balanced [@Rosenbaum.1981; @Rosenbaum.1984; @Rosenbaum.2022]. Therefore, theoretically, two students with similar propensity scores should have a similar underlying distribution of observed covariates.

Researchers can condition on the propensity score using a variety of techniques, including matching [@ho2007matching], which pairs treated students with control students based on the proximity of their propensity score; stratification, which groups students into unique strata based on their propensity score [@Rosenbaum.2010]; and weighting [@Lee.2010], which reweighs students in the sample so that the distribution of the propensity score of the control group is similar to that of the treated group. All these methods have a similar aim of using the propensity score to adjust for the imbalance in the covariate distribution between treated and control units to approximate true randomization conditions. Therefore, by conditioning on the propensity score through matching, stratification, or weighting, we can eliminate bias in our treatment effect and approximate the true causal effect [@Pan.2018qcl]. However, for this to be true, certain assumptions must hold.

#### Assumptions

Several assumptions must be met to estimate an unbiased treatment effect using propensity scores. These include the strong ignorability assumption, the stable unit value assumption, and region of common support [@rubin2005causal].

The strong ignorability assumption states that the potential outcome of an individual is conditionally independent of treatment assignment if we successfully conditioned on all covariates related to treatment, $Y_1, Y_0 \perp Z|X$. In experimental studies, this assumption is satisfied by the act of randomization, since randomization ensures that treatment assignment is independent of an individual's outcome [@rubin2005causal; @Rosenbaum.2022]. However, in observational studies, this assumption holds if *all* covariates related to treatment assignment are included in the propensity score model [@Rosenbaum.1981; @Rosenbaum.1984].

The second assumption, the stable unit treatment value assumption (SUTVA), states that the potential outcome of an individual is unaffected by the treatment assignment of any other individual [@Rosenbaum.2022]. In other words, the outcome of a student is independent of whether another student is assigned to the treatment or control group.

Finally, the third assumption is the region of common support. This assumption states that there must be sufficient overlap in the estimated propensity score distribution between the treatment and control groups [@Rosenbaum.2022]. With sufficient overlap, we can ensure that we can find suitable matches for treated students.

If these assumptions hold, we can estimate causal effects from observational data. Unfortunately, many of these assumptions are untestable [@Stuart.2010; @ho2007matching; @Lee.2010]. For example, in observational data, the majority of the time, we are blind to the underlying treatment assignment mechanism, and therefore we cannot be sure that *all* covariates related to treatment assignment are included in our propensity score model [@Stuart.2010]. In practice, propensity score analysis should be viewed as a means of reducing some, but not all, of the bias between the treatment and the outcome in observational studies. Since we cannot ensure that all confounding variables are included in our propensity score model. Therefore, special attention should be paid to which covariates are selected to be included in the propensity score model.

#### Covariate Selection

A reasonable approach to selecting covariates in propensity score analysis is selecting covariates that are theoretically sound and related to treatment assignment and the outcome [@Stuart.2010; @Bai.2011; @Pan.2018qcl]. Since in order to estimate unbiased treatment effects correctly using propensity scores, we have to capture *all* covariates related to the selection into treatment, leaving out no potential confounders [@Rosenbaum.2010]. However, in practice, it may be impossible to know which covariates are confounders; therefore, the literature suggests a "kitchen sink" approach for variable selection to guard against the penalties of excluding potential confounders [@Pirracchio.2015; @Shortreed.2017lu8]. In addition, the propensity score model must capture the correct functional form of the covariates, meaning that all proper interactions and non-linear terms are specified [@Rosenbaum.2010; @Pan.2018qcl]. If the propensity score model is misspecified, it will lead to biased treatment effect estimates [@Rosenbaum.1984; @Rosenbaum.1981; @Guo.2009].

To better capture the relationship among covariates, the literature suggests iterating through various model specifications, with each iteration adding interactions or non-linear terms until a balance is achieved among the observed characteristics between treated and untreated students [@murnane2010methods; @Rosenbaum.2010]. This iterative process becomes increasingly cumbersome as the number of available covariates increases.

\newpage

### Estimating Propensity Scores

The most critical step in propensity score analysis is estimating the propensity score ($e$), since a misspecified propensity score model will yield propensity scores that are not well suited to correctly balanced observed characteristics. Any parametric or non-parametric model can generate propensity scores as long if it outputs a bounded probability between 0 and 1. Logistic regression is the most common parametric model used for estimating the propensity score, especially in applied educational research [@Stuart.2010; @ho2007matching; @Lee.2010; @Collier.2021lp; @Keller.2015q8].

#### Logistic Regression

Logistic regression is the most common model used to generate propensity scores in the social science literature due to its ease of interpretation and familiarity with many applied researchers and its ability to accommodate both continuous and categorical covariates[@Keller.2015q8]. The logistic model is defined as follows:

$$
logit(Z_i = 1|X)=log\left( \frac{Pr(Z=1|X)}{1-Pr(Z=1|X)} \right) = \beta_o + \beta_1X_1 + \cdots + \beta_pX_p
$$ {#eq-log}

Where $X$ is a vector of observed covariates that are regressed on $Z$, a binary indicator equal to 1 if a student is in the treatment group and 0 otherwise. The output of the logistic regression is predicted probabilities that are continuous and bounded between 0 and 1 (i.e., propensity scores).

Although logistic regression is the most widely used model for estimating propensity scores, it may not be the most valid for inference. Various simulation studies suggest that using logistic regression for modeling propensity scores is inadequate and leads to biased treatment effects when incorrectly specified, given that parametric models require assumptions regarding the functional form and variable distributions [@Lee.2010; @Pan.2018qcl; @Setoguchi.2008; @Westreich.2010]. This is especially true when estimating propensity scores with hundreds of covariates [@Hill.2011soh]. The logistic model tends to degrade and estimate a propensity score that falls outside the desired 0 to 1 bound in a high-dimensional context [@Hill.2011soh; @Collier.2021lp; @Keller.2015q8]. With the ever-increasing amounts of "big" administrative data at the disposal of applied behavioral and social science research, the degradation of logistic regression is worrisome. However, outside social science, research has suggested alternatives to logistic regression in estimating the propensity score that use non-parametric machine learning algorithms [@Stuart.2010; @ho2007matching; @Lee.2010; @Setoguchi.2008; @Watkins.2013; @Westreich.2010; @Cannas.2019].

#### Machine Learning Approaches

Machine learning algorithms have recently gained popularity in the causal inference and propensity score literature due to these algorithms being highly flexible and able to model complex functional forms iteratively without explicit manipulation from the research [@pearl2019seven; @grimmer2015we; @athey2015machine; @cui2020causal]. With a simple modification, these algorithms can output bounded probabilities that can be used as propensity scores. Given the success of machine learning methods for prediction tasks, it is reasonable to think they are worthy candidates for the propensity score estimation problem, which I view as a prediction problem. Broadly, machine learning algorithms used in propensity score estimation can be classified into tree-based, ensemble methods, and -- the focus of this dissertation -- neural network-based approaches.

#### Tree Based Methods

One popular machine learning approach to estimating propensity score is classification and regression trees (CART) [@li1984classification]. This algorithm recursively divides data into subsets based on individual covariates to predict the probability of membership assignment of a given individual. To generate propensity scores, the outcome is set to a binary indicator of treatment assignment ($Z$). This algorithm splits covariates by level of importance, with the first split being the covariate that can produce the most distinctive split. For example, if a student above 15 years of age is related to treatment assignment, the first split would split the data into students with $age > 15$ and $age < 15$. The algorithm continues by splitting the data by the next most influential covariate split, creating a tree-like structure, see @fig-decision_tree. Splitting stops when the data are binned into unique "branches," which minimizes the prediction error in which an additional split would not improve the prediction of treatment assignment. The final "branches" of the model represent the individual grouping of students with similar propensity scores [@Stuart.2010]. The output of CART is the predicted probabilities which are then used as propensity scores. Like logistic regression, the CART algorithm can handle continuous and categorical covariates . However, unlike logistic regression, CART is insensitive to outliers and can automatically model interactions and higher-order terms [@Lee.2010]. Through a simulation, Lee et al. (2009) found that CART outperformed logistic regression in bias reduction and covariate balance when the data had complex associations.

[![Simple decision tree predicting students GPA based on gender and homework grade](figures/decision_tree.jpg){#fig-decision_tree fig-align="center" width="436"}](https://www.apa.org/science/about/psa/2018/04/classification-regression-trees)

However, a well-documented issue with CART is that the single tree may likely overfit the data [@Stuart.2010; @ho2007matching]. Therefore, a modified version of CART was developed that "prunes" back branches that do not lead to a reduction in prediction error, referred to as pruned-CART [@gelfand1989iterative], which generates a tree that is less likely to overfit the data. Although pruning can alleviate some of the changes in overfitting of the data, a significant drawback of CART is that it relies on a single tree, which may be weak in predicting the propensity score.

#### Ensemble Methods

Ensemble methods are a family of algorithms that generate multiple trees predicting treatment assignment [@Keller.2019; @Stuart.2010; @ho2007matching; @Lee.2010]. Exploiting differences among each tree ensemble method can significantly improve prediction, given that many weak trees together can create better prediction than any single tree [@Lee.2010]. A popular ensemble method is bootstrapped aggregated CART, referred to as Bagged CART. Bagged CART involves fitting multiple CARTs (i.e., trees) on bootstrapped data samples [@Lee.2010]. By "growing" trees on bootstrapped samples, we can reduce the chances of overfitting our data. Each tree will generate a probability that an individual will be assigned to treatment, with a final probability of membership based on aggregating the probability of assignment across all trees. A more robust ensemble method is random forest [@biau2016random]. Compared to CART and Bagging, the random forest algorithm grows trees by randomly selecting covariates and individuals to grow individual trees. With each new tree, the algorithm "learns" the best combination of covariates to generate a final probabilistic prediction based on the "forest" it has created. These random forest techniques have shown significant promise in predicting propensity scores in the presence of complex data associations [@Cannas.2019; @Lee.2010]. However, with the recent advances in computing power, non-tree-based methods, such as neural networks, have increased in popularity [@Collier.2021lp; @Setoguchi.2008; @Keller.2015q8].

\newpage

### Artificial Neural Network Architectures

#### Artificial Neuron

The building block for artificial neural networks was initially developed by psychologist Frank Rosenblatt (1958) with their idea of a perceptron or artificial neuron, see @fig-perceptron. An artificial neuron is a simplified mathematical model of neurons in our brain [@james2013introduction]. Neurons are biological switches that take input signals from other neurons that cause the neuron to fire. Neurons can be thought of as simple processing units. In our brain, these individual neurons are connected into vast networks of billions of neurons, where the outputs of one neuron become inputs of another, allowing for the transmission of complex information [@schmidhuber2015deep; @LeCun.2015].

![Structure of a perceptron - artificial neuron](figures/perceptron.png){#fig-perceptron fig-align="center" width="437"}

An artificial neuron mimics the function of a biological neuron. The artificial neuron takes in a set of inputs of $p$ variables, $X=(X_1, X_2, \dots, X_i)$ that have corresponding weights $w=(w_1, w_2, \dots ,w_i)$ that represent the different input strength of each variable. Each variable is then multiplied by its corresponding weight. These weighted variables are then summed together, and a bias term is added ($\beta_0$) to create a linear transformation of the input variables. Weight and bias terms are analogous to the slope and intercept of linear regression. The linear transformation is then passed to an activation function $g(z)$. The activation function takes in the linear transformation and performs a computation that generates an output ($\hat{y}$), which outputs either a 1 or 0. This activation function can also be set to be a linear function, such as the sigmoid function, which outputs values between 0 and 1.

We can express this artificial neuron generally as:

$$
\hat{y} = g(z) = g(\beta_0 + \sum_{i=1}^{p}X_iw_i)
$$ {#eq-nn}

This simple neuron can be used to solve a binary classification problem. In our case, we are interested in classifying each student in our sample as belonging to the treatment or control condition conditional on observed covariates. If we set the activation function $g(z)$ to a sigmoid function, we are guaranteed an output value between 0 and 1 (i.e., propensity score). For the neuron to make accurate predictions for each student, it must "learn" the correct weight and bias parameter specifications. This is analogous to finding the right slope and intercept, which produce a line of best fit for bivariate data.

This learning process works by taking each observation in our sample and feeding it into the neuron. In which the first pass has initialized weights and bias set to a random number. The outcome variable is set to the binary indicator of treatment assignment, so we obtain a predicted probability of treatment assignment for each student. Our initial pass of the data will likely generate wrong predictions since the weights and bias terms are initialized to random numbers. In other words, our prediction of treatment assignment ($\hat{y}$) will be far from the actual treatment assignment ($y$), with an associated loss.

The goal of the neuron and most machine learning algorithms is to correctly learn the values of the weights and bias parameters that minimize a loss function, for example, the mean squared error (MSE) [@james2013introduction; @Pang.2019]. The neuron will update the bias and weight parameters iteratively for each subsequent data pass to minimize this loss function. This update is commonly done using a process known as backpropagation [@schmidhuber2015deep]. After a user-defined number of iterations, the neuron will be optimized with bias and weight terms that best predict treatment assignment. A single neuron may be appropriate for simple classification problems with linear covariate associations. As the complexities of associations between covariates increase, more neurons are needed to learn complex functional forms.

#### Single-Layer Neural Network

Following the development of the artificial neuron, work began to model more complex processing units composed of interconnected artificial neurons organized in layers, culminating with the creation of the single-layer feed-forward neural network (NN) (@fig-nn)\[@Schmidhuber.2015; @Collier.2022; @Keller.2015q8\]. NN are referred to as single-layer because of the single middle layer of interconnection artificial neurons. These NN can learn very complex data representations by generating various non-linear representations of the data through multiple artificial neurons [@james2013introduction]. These non-linear outputs are passed into a final layer which pools the outputs of the individual neurons into a non-linear function, $f(x)$, which generates a prediction ($\hat{y}$). By having multiple artificial neurons calculating predictions on various non-linear combinations of the input variables, these networks can learn complex non-linear and non-additive associations between covariates.

![Structure of single-layer neural network](figures/nn.png){#fig-nn fig-align="center" width="493"}

\newpage

The NN comprises a series of artificial neurons organized into three layers[@james2013introduction]. The first layer is the input layer of $p$ variables, $X_p=(X_1, X_2, \dots, X_p)$, our observed covariates. Those input variables are fully connected to the second layer - a hidden layer - made up of $K$ hidden neurons, $A_k = (A_1, A_2, \dots, A_k)$, which are identical to the artificial neurons mentioned previously, except that the activation function is swapped out to a non-linear function. Each hidden neuron calculates its own prediction based on its unique non-linear combination of variable inputs and associated weight and bias parameters. The last layer is the output layer, which pools the non-linear outputs of the hidden neurons and passes them as inputs to a non-linear output function, $f(x)$, which generates a final prediction ($\hat{y}$). The interconnected neurons allow NN to learn more complex associations between covariates and treatment assignment than a single artificial neuron [@james2013introduction; @Schmidhuber.2015; @hernandez2019systematic].

We can express a NN generally as[^02-propensity_over-1]:

[^02-propensity_over-1]: This notation was adapted from James, Witten, Hastie and Tibshirani, 2021

$$
\hat{y} = f(x) = B_0 + \sum_{k=1}^{K}B_kh_k(X) = B_0 + \sum_{k=1}^{K}B_kg(w_{k0}+\sum_{j=1}^{p}w_{kj}X_j)
$$ {#eq-nn_gen}

Where each hidden unit $A_k, k =1,\dots,K$ is created from a weighted linear combination of input variables, $X_1,X_2, \dots,X_p$ that are applied to an activation function $g(z)$ resulting in an "activation" for each hidden neuron, $A_k$:

$$
A_k = h_k(X) = g(w_{k0}+\sum_{j=1}^{p}w_{kj}X_j)
$$ {#eq-nn_activation}

$w_{k0}$ and $w_{kj}$ are the bias and corresponding weights for each $A_k$ hidden neuron. We can regard these activations as individual predictions of each hidden neuron. These predictions are then pooled and passed to the output function ($f(x)$), which has its bias term, $B_0$, and produces a final prediction ($\hat{y}$).

The NN learning process works in a similar way to a single neuron, but instead of learning only one set of weights and bias terms, it learns multiple simultaneously. Similarly, the ultimate goal of the NN is to learn the correct weights and bias parameters so that the loss function is minimized. In contrast to a single artificial neuron, NN can learn complex non-linear relationships in a computationally efficient manner[@james2013introduction]. Few studies have looked at the overall performance of NN in estimating propensity scores [@Setoguchi.2008; @Cannas.2019; @Westreich.2010; @Keller.2015q8; @Collier.2021lp]. These studies find that the NN are suitable for estimating the propensity score and generally outperform logistic regression in bias reduction and covariate balance [@Setoguchi.2008; @Cannas.2019; @Westreich.2010; @Keller.2015q8; @Collier.2021lp].

Modern approaches use NN with more than one hidden layer and a varying number of hidden neurons. This NN architecture is referred to as deep neural networks (DNN) or multilayer neural network [@LeCun.2015].

#### Deep Neural Networks

The DNN distinguishing feature is the multiple hidden layers that allow it to capture even greater complex relationships among covariates [@Pang.2019; @hernandez2019systematic]. These multiple hidden layers make this neural network architecture "deep." @fig-nn shows a diagram of a DNN with two hidden layers ($L_1, L_2$).

![Structure of deep neural network with two hidden layers](figures/dnn.png){#fig-dnn fig-align="center"}

The first hidden layer functions exactly as the middle layer of a NN @eq-nn_activation. The first layer of this DNN is represented as:

$$
A_k^{(1)}=h_k^{(1)}(X) = g(w_{k0}^{(1)}+\sum_{j=1}^{p}w_{kj}^{(1)}X_j)
$$ {#eq-dnn-1}

Where each hidden unit in the first layer $A_k^{(1)}, k =1,\dots,K_1$ is created from a weighted linear combination of input variables, $X_1,X_2, \dots,X_p$ that are applied to a non-linear activation function $g(z)$ that results in an output for each hidden neuron in the first layer, $A_k^{(1)}$.

The second hidden layer $L_2$ takes as inputs the outputs of $A_k^{(1)}$ of the first hidden layer and computes a new non-linear transformation, $A_k^{(2)}$. The new activations of the second layer are calculated as follows:

$$
A_l^{(2)}=h_k^{(2)}(X) = g(w_{l0}^{(2)}+\sum_{k=1}^{K_1}w_{lk}^{(2)}A_k^{(1)})
$$ {#eq-dnn-2}

Where each hidden unit in the second layer $A_l^{(2)}, l =1,\dots,K_2$ is a function of the output of the weighted non-linear combinations of $A_k^{(1)}$, this process can be extended to additional hidden layers. As data move from layer to layer, DNN can approximate increasingly complex functional forms [@LeCun.2015; @schmidhuber2015deep; @james2013introduction]. The final layer of the DNN aggregates the outputs of the second layer and feeds them into an output function that generates a prediction. Although any number of hidden layers can be chosen, it comes with computational costs as the number of hidden layers increases [@LeCun.2015]. Outside of image and speech recognition, only a few hidden layers are needed to capture almost any functional form, with three hidden layers being the "goldilocks" number [@james2013introduction].

#### Deep Neural in Causal Inference

DNN can uncover complex relationships in high-dimensional data with better precision than traditional statistical and machine learning methods, which were novel just a decade ago [@hernandez2019systematic; @LeCun.2015; @Schmidhuber.2015]. A DNN ability to identify the intricate relationships within large-volume, high-dimensional data makes these algorithms applicable to causal methods, such as propensity score analysis.

DNN have gained significant attention in industry and academic research, making considerable advances in image recognition and natural language processing [@LeCun.2015; @james2013introduction]. Recent investments by Google in software development now make it easy to develop DNN models using user-friendly programming languages [@Pang.2019].

To date, DNN has not been sufficiently evaluated in the broader literature on causal inference, with most research residing within medical or genomic research [@Kale.2015; @Iglesias.2021; @LeCun.2015]. DNN have been relatively unexplored in social science due to the lack of knowledge on how to run DNN and assess to high-dimensional data [@Farrell.2021]. With the increasing availability of high-dimensional datasets in social science research, DNN will undoubtedly become more popular and develop into an exciting line of research in the coming years. However, relatively little work has incorporated DNN into propensity score analysis.

Only two medical peer-reviewed studies have attempted to use DNN for propensity score estimation [@Whata.2022; @Weberpals.2021]. @Weberpals.2021 use data from around 130,000 cancer patients to construct a simulated data set with 31 baseline covariates in which treatment receives a fictional cancer drug, and the outcome is a binary survival indicator. Using a specific DNN architecture called an "autoencoder" with three hidden layers, they find that DNN reduces confounding bias in treatment effect over the traditional logistic model with manual variable selection. In contrast, @Whata.2022 examine the performance of logistics regression compared to DNN with four hidden layers using a simulation (with 15 covariates) and a real-world application. In their simulation, they varied the level of complexity in the population treatment model but not the outcome model. They found that DNN outperformed logistic regression in terms of covariate balance, classification accuracy, and absolute relative bias.

Both studies speak to the increase in interest in using DNN for causal inference and shed light on the possibilities that DNN are a valid approach to estimating the propensity score. My dissertation builds on these studies by comparing DNN with traditional logistic regression and several machine learning approaches well established in the propensity score simulation literature. In addition, my simulation test complexities in both the outcome *and* treatment models. This study will be the first to test DNN for propensity score estimation outside medical research and with high-dimensional data that mimic high-dimensional administrative datasets encountered by educational researchers.

\newpage

## Method

The focus of my second dissertation study is to evaluate the performance of various modern machine learning techniques, including classification and regression tree (CART), bagged CART, random forest, and a single-layer neural network, against the traditional logistic regression and my proposed DNN-based approach using high-dimensional data. Specifically, I will evaluate the impacts of various degrees of data dimensionality (i.e., low vs high-dimensional context) and misspecifications in both the population treatment and outcome models on the estimate of the treatment effect and covariate balance. To achieve this, I will use a Monte Carlo simulation design informed by previous propensity score estimation studies conducted by Setoguchi et al. (2008), Lee et al. (2009), and Cannas and Arpino (2019). My simulation code will begin with Cannas and Arpino's publicly available code from their 2019 manuscript and will be guided by best practices in statistical simulation outlined by Morris et al. (2018). In the remainder of this section, I will describe the simulation design for this study, including the data generation mechanisms, estimands of interest, specific specifications of methods evaluated, and performance measures.

### Data-Generation Mechanisms

The data generation mechanism was informed by the evaluation I conducted as part of my first dissertaton study

#### Covariates

I took a programmatic approach to generate correlated covariates $(X_1,X_2,X_3,\dots,X_p$ that varied in dimensionality ($p = 20, 100, 200$). The simulated covariates were generated from random pulls from a multivariate normal distribution with $\mu=0$ and $\sigma=1$, with a specified correlation matrix with correlations set between -0.3 and 0.3 using the *mvrnorm* function from the *MASS* package in *R* (CITE).

In order to keep the correlation structure intact I used the inverse CDF (cumulative distribution function) approach to convert the initial random pull of covariates from the multivariate normal distribution to three distributions; a normal distribution with a mean of 0 and SD of 1, a uniform distribution with a range of 0 to 1, and a Bernoulli distribution with a probability of success set at 0.5. For each covariate condition, half of the covariates were generated from the normal distribution, a quarter from the uniform distribution, and the remaining quarter from the Bernoulli distribution.

Much of the literature on propensity score simulation generates uncorrelated covariates [@Setoguchi.2008; @Stuart.2010; @ho2007matching; @Lee.2010]. However, this is not representative of the correlated data typically found in administrative data. Therefore, I generate correlated covariates using the inverse CDF (cumulative distribution function) method.

Covariates were constructed so that half of the covariates affected both treatment and outcome (i.e., confounders), a quarter affected only treatment and the remaining quarter affected the outcome only.

#### Sample Size

I used a fixed sample size of 10,000 for all simulation conditions. Note that most of the current propensity score simulation studies generate much smaller sample sizes[@Setoguchi.2008; @Stuart.2010; @ho2007matching; @Lee.2010]. Given that I am trying to mimic the real-world application of high-dimensional administrative data, this sample size is appropriate.

#### Population Treatment Assignment Models

I generated the population treatment assignment models using standard logistic regression. These population treatment assignment models can also be referred to as population propensity score models since they generate the "true" probability of being assigned to treatment. The following logistic regression model represents the general structure of these models.

$$
Pr(Z = 1) = (1 + exp(-(\beta_0 + \sum_{i=1}^{p} \beta_iX_i)))^{-1}
$$ {#eq-popps}

$X_i$ represents $p$ covariates and their associated coefficients ($\beta_i$). The output, $Pr(Z = 1)$ is the probability of assignment to the treatment condition (i.e., the propensity score).

The exact values of the coefficients will be based on previous coefficient values for propensity score simulation studies, mainly @Keller.2015q8. I generated a binary treatment assignment variable by comparing an individual's true propensity score to a random draw from a uniform distribution between 0 and 1. If the propensity score of an individual was higher than the random draw of the uniform distribution, the individual was assigned to treatment such that $Z = 1$, otherwise $Z = 0$. This approach should approximate a probability of assignment to treatment of 0.5, which is the probability of assignment to a randomized experiment with binary treatment.

I generated three types of population treatment assignment models (A, B, C, and D) in which I added increasing levels of complexity to the model in the form of interactions (i.e., non-additivity) and higher order terms (i.e., non-linearity).

**Scenario "A"** includes only main effects, which assumes a linear relationship between covariates and treatment assignment. I consider this the base model, which is expressed using the following formula:

$$
PS^{A}(X) = (1 + exp(-(\beta_0 + \sum_{i=1}^{p} \beta_iX_i)))^{-1}
$$ {#eq-psA}

$X_i$ represents $p$ covariates and their associated coefficients $\beta_i$. The output, $Pr(Z = 1)$ is the probability of assignment to the treatment condition (i.e., propensity score).

**Scenario "B"** describes a non-linear model in which I include quadratic terms on a subset of covariates:

$$
PS^{B} = PS^{A}(X) + \beta_iX_i^2
$$ {#eq-psB}

**Scenario "C"** describes a non-additive model in which I include interactions on a subset of covariates:

$$
PS^{C} = PS^{A}(X) + \beta_iX_iX_{i+1}
$$ {#eq-psC}

**Scenario "D"** describes the most complex population treatment assignment model and includes both non-linearities and non-additivities:

$$
PS^{D} = PS^{A}(X) + \beta_iX_i^2 + \beta_iX_iX_{i+1}
$$ {#eq-psD}

#### Population Outcome Models

In addition to the population treatment assignment models, I generated a series of population outcome models in which I varied the level of complexities between covariates and potential outcomes by including interactions and higher-order terms. Adding these complexities to the outcome model is relatively novel in the propensity score literature, although it is much more representative of the complex associations found in datasets in educational research @Cannas.2019.

Continuous potential outcomes were generated through regression models. The general structure of the population outcome models is defined as follows:

$$
Y(Z) = \alpha^Z + \sum_{i=1}^{p} \pi_iX_i; Z = 0,1
$$ {#eq-outcome}

$X_i$ represents $p$ covariates with their associated coefficients ($\pi_i$). The output, $Y$ is the continuous outcome. When $Z=1$, the outcome is the potential outcome of treatment, and when $Z = 0$, the potential outcome of control. $\alpha^Z$ represented the coefficient and intercept for $\alpha^0$ and $\alpha^1$, which are set such that the population treatment effect is equal to 0.3. This is in line with the typical small treatment effects that we observe in education research in which the average effect size is equal to 0.28 SD @richardson2011eta.

Like the population treatment assignment models, I generated three types of population outcome models indexed by lower-case letters (a, b, c, d) with varying levels of complexity.

**Scenario "a"** - the base model - includes only main effects, which assumes a linear relationship between covariates and potential outcomes. I consider this the base model, which is expressed using the following formula:

$$
Y^{a}(Z) = \alpha_0^{a,Z} + \sum_{i=1}^{p} \alpha_i^{a,Z}X_i = \alpha_0^{a,Z} + g^a(X); Z = 0,1
$$ {#eq-outcome_a}

Where $X_i$ represents $p$ covariates and their associated coefficients ($\alpha_i^{\alpha,Z}$) which depend on treatment assignment, $Z$. The output, $Y^{a}(Z)$ is set to $Y^{a}(1)$ for the outcome related to treatment and $Y^{a}(0)$ for the control.

**Scenario "b"** describes a non-linear model in which I include quadratic terms on a subset of covariates:

$$
Y^{b}(Z) =  \alpha_0^{a,Z} + g^a(X) + \alpha_iX_i^2; Z = 0,1
$$ {#eq-outcome_b}

**Scenario "c"** describes a non-additive model in which I include interactions on a subset of covariates:

$$
Y^{c}(Z) =  \alpha_0^{a,Z} + g^a(X) + \alpha_iX_iX_{i+1}; Z = 0,1
$$ {#eq-outcome_c}

**Scenario "d"** describes the complex model which includes both non-linearities and non-additivities:

$$
Y^{d}(Z) =  \alpha_0^{a,Z} + g^a(X) + \alpha_iX_i^2 + \alpha_iX_iX_{i+1}; Z = 0,1
$$ {#eq-outcome_d}

#### Propensity Score Estimation Methods

I access the performance of popular machine learning techniques used in the propensity score estimation literature, including classification and regression tree (CART), bagged CART, random forest, and single-layer neural network.

-   **Logistic regression**: standard logistic regression with only main effects

-   **Classification and Regression Trees (CART)**: using the R *rpart* package (Therneau & Atkinson, 2018) with default parameters and recursive partitioning.

-   **Bagged CART**: bootstrapped aggregated trees with 100 bootstrap samples using the R *ipred* package (Peters, Hothorn, & Lausen, 2002).

-   **Random Forest**: parallel tree generation on subsamples based on randomly selected covariates using the R *randomForest* package with default parameters (Liaw & Wiener, 2002).

-   **Single-Layer Neural Network (NN)**: a simple three layer NN with an input layer, one hidden layer, and an output layer. The input layer was equal to $p$ covariates and the hidden layer was made up of hidden neurons equal to 1/3 of the input covariates, as is standard practice in neural network applications and default parameters. Using the R *nnet* package (Ripley & Venables, 2016).

-   **Deep Neural Network (DNN-2)**: a four layer DNN with an input layer, two hidden layers, and an output layer. The input layer was equal to $p$ covariates and the hidden layers were made up of hidden neurons equal to 1/3 of the input covariates with default parameters. Using the R *keras* package (Chollet et al., 2017) which interfaces with Python.

-   **Deep Neural Network (DNN-3)**: a five layer DNN with an input layer, three hidden layers, and an output layer. The input layer was equal to $p$ covariates and the hidden layers were made up of hidden neurons equal to 1/3 of the input covariates with default parameters. Using the R *keras* package (Chollet et al., 2017) which interfaces with Python.

I used well-established best practices for default parameters in all models to mimic the real-world application of these methods by applied researchers.

#### Simulation Scenarios

In total, I tested three covariates levels (p = 20, 100, 200), with four treatment models (A, B, C, D) and four outcome models (a, b, c, d), for a total of 48 simulated conditions. Given the high-dimensional data generated in my simulation, I used the University of Pittsburgh Center for Research Computing cluster to run the simulation on high-memory nodes. Each scenario was simulated 1,000 times, making it a true Monte Carlo experiment. @tbl-cross shows the crossing of the four treatment and outcome models.

|     | A (base) | B (non-linearity | C (non-additivity) | D (complex) |
|:---:|:--------:|:----------------:|:------------------:|:-----------:|
|  a  |    Aa    |        Ba        |         Ca         |     Da      |
|  b  |    Ab    |        Bb        |         Cb         |     Db      |
|  c  |    Ac    |        Bc        |         Cc         |     Dc      |
|  d  |    Ad    |        Bd        |         Cd         |     Dd      |

: Simulation conditions for the crossing of the treatment and outcome models {#tbl-cross}

#### Estimating Treatment Effects - Propensity Score Weighting

To recapture the treatment effect using the methods detailed above, I used a propensity score weighting approach, specifically the inverse probability of treatment weighting (IPTW) [@Lee.2010], where covariate balance is achieved between treated and untreated units by reweighting observations based on their estimated propensity score. Such that each treated observation is equal to $1/e_i(x)$, and untreated units receive a weight of $1/(1-e_i(x)$, where $e_i(x)$ is the estimated propensity score for unit $i$ this weighting scheme estimates the ATE.

However, in observational studies, the more policy-relevant estimand is the ATT. Therefore, for this simulation, I give a weight of $1$ to each treated unit, and a control unit is assigned a weight of $e_i(x)/(1-e_i(x)$ so that untreated units with a similar propensity score to that of treated units are up-weighted and untreated units with dissimilar propensity scores to treated units are down-weighted. The ATT was calculated using regression where the outcome variable ($Y$) was predicted by a binary treatment assignment variable, with ATT weights included.

#### Performance Metrics

To gauge the performance of each propensity score estimation method, I used the following metrics, which are widely used to access model performance in the propensity score simulation literature [@Setoguchi.2008; @Cannas.2019; @Stuart.2010; @Lee.2010; @McCaffrey.2004]:

-   **Average Standardized Absolute Mean Distance (ASAM)**: is a measure of of covariate balance. After calculating the ATT, the absolute value of the standardized difference of means between the treated and untreated group was calculated for each covariate and averaged across all covariates. Lower ASAM values indicate better covariate balance.

-   **Absolute Relative Bias (Bias)**: the absolute difference between the estimated treatment effect and the population treatment effect. Lower values indicate less bias in recapturing the population treatment effect of 0.3.

-   **Mean Squared Error (MSE)**: the average squared difference between the estimated treatment effect and the population treatment effect. MSE is a good representation of both bias and variance and a common performance metric in machine learning literature [@athey2015machine; @Mullainathan.2017].

-   **Weights**: a known issue with PSW is that extreme weights can result in biased treatment effects. Therefore I examine the distribution of the estimated weights among the control group.

### Looking Ahead

All the simulation code is complete, and I can generate preliminary results. My preliminary results suggest that the DNN approach outperforms logistic regression and machine learning approaches when complexities are included in the treatment and outcome model. When only main effects are included, logistic regression leads to less biased treatment effects over all other methods. I am working on the code that induces correlations among covariates based on feedback from Xu and Paul. I am also fixing some errors in the programmatic way I build the treatment and outcome model. I should have final results by the end of the month.
